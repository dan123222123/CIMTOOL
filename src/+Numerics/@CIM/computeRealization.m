function computeRealization(obj)
    import Numerics.sploewner.sploewner_quadrature Numerics.mploewner.mploewner_quadrature;
    opts = namedargs2cell(obj.options);
    m = obj.RealizationData.RealizationSize.m;
    K = obj.RealizationData.K;
    [theta,sigma] = obj.RealizationData.getThetaSigma(K,K);
    switch(obj.RealizationData.ComputationalMode)
        case {Numerics.ComputationalMode.Hankel,Numerics.ComputationalMode.SPLoewner}
            [obj.ResultData.ew,obj.ResultData.rev,obj.ResultData.lev,obj.ResultData.Db,obj.ResultData.Ds,obj.ResultData.BB,obj.ResultData.CC,obj.ResultData.X,obj.ResultData.Sigma,obj.ResultData.Y] = sploewner_quadrature( ...
                sigma(1), ...
                obj.SampleData.Contour.z, ...
                obj.SampleData.Contour.w, ...
                obj.SampleData.Ql, ...
                obj.SampleData.Qr, ...
                obj.SampleData.Qlr, ...
                K, ...
                m, ...
                obj.options ...
            );
        case Numerics.ComputationalMode.MPLoewner
            [obj.ResultData.ew,obj.ResultData.rev,obj.ResultData.lev,obj.ResultData.Db,obj.ResultData.Ds,obj.ResultData.B,obj.ResultData.BB,obj.ResultData.C,obj.ResultData.CC,obj.ResultData.X,obj.ResultData.Sigma,obj.ResultData.Y] = mploewner_quadrature( ...
                obj.SampleData.Contour.z, ...
                obj.SampleData.Contour.w, ...
                obj.SampleData.Ql, ...
                obj.SampleData.Qr, ...
                obj.SampleData.L, ...
                obj.SampleData.R, ...
                theta, ...
                sigma, ...
                m, ...
                opts{:} ...
            );
    end
    obj.RealizationData.loaded = true;
end
